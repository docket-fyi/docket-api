{
  "swagger": "2.0",
  "info": {
    "description": "",
    "title": "Docket API",
    "version": "0.1.0"
  },
  "host": "localhost:3000",
  "basePath": "/v1",
  "schemes": [
    "http"
  ],
  "paths": {
    "/auth": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "AuthPostRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "example": "you@example.com",
                  "format": "email",
                  "type": "string"
                },
                "password": {
                  "example": "s3cr3t",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "jwt": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Auth"
        ],
        "operationId": "auth",
        "description": "",
        "summary": "Issues a JWT"
      }
    },
    "/docs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK. A JSON object",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "Documentation"
        ],
        "operationId": "getDocs",
        "description": "Returns an OpenAPI 3.0 spec describing HTTP methods, endpoints, parameters, etc.",
        "summary": "Returns an OpenAPI 3.0 spec."
      }
    },
    "/me": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "deleteMe",
        "description": "",
        "summary": "Deletes the current user"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "getMe",
        "description": "",
        "summary": "Fetches the current user"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "MePutRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "example": "you@example.com",
                  "format": "email",
                  "type": "string"
                },
                "firstName": {
                  "example": "John",
                  "type": "string"
                },
                "lastName": {
                  "example": "Doe",
                  "type": "string"
                },
                "password": {
                  "example": "s3cr3t",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "updateMe",
        "description": "",
        "summary": "Updates the current user"
      }
    },
    "/me/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "getMyEvents",
        "description": "",
        "summary": "Fetches all events for the current user"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "MeEventsPostRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "date": {
                  "example": "2018-12-25 00:00:00.000",
                  "format": "date-time",
                  "type": "string"
                },
                "name": {
                  "example": "Christmas 2018",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "createMyEvent",
        "description": "",
        "summary": "Creates a new event for the current user"
      }
    },
    "/me/events/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "deleteMyEventById",
        "description": "",
        "summary": "Deletes an event for the current user"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "body",
            "name": "MeEventPutRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "date": {
                  "example": "2018-12-25 00:00:00.000",
                  "format": "date-time",
                  "type": "string"
                },
                "name": {
                  "example": "Christmas 2018",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "updateMyEventById",
        "description": "",
        "summary": "Updates an event for the current user"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Event"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Me"
        ],
        "operationId": "getMyEventById",
        "description": "",
        "summary": "Fetches a specific event for the current user"
      }
    },
    "/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "UsersPostRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "example": "you@example.com",
                  "format": "email",
                  "type": "string"
                },
                "firstName": {
                  "example": "John",
                  "type": "string"
                },
                "lastName": {
                  "example": "Doe",
                  "type": "string"
                },
                "password": {
                  "example": "s3cr3t",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "User"
        ],
        "operationId": "createUser",
        "description": "",
        "summary": "Create a user"
      }
    },
    "/users/confirm/{code}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "User"
        ],
        "operationId": "confirmUser",
        "description": "",
        "summary": "Confirms user's registration"
      }
    },
    "/users/forgot-password": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "ForgotPasswordPostRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "example": "you@example.com",
                  "format": "email",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "User"
        ],
        "operationId": "forgotPassword",
        "description": "",
        "summary": "Forgot password"
      }
    },
    "/users/reset-password": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "ResetPasswordPostRequestBody",
            "required": true,
            "schema": {
              "properties": {
                "password": {
                  "example": "s3cr3t",
                  "type": "string"
                },
                "passwordConfirmation": {
                  "example": "s3cr3t",
                  "type": "string"
                },
                "code": {
                  "example": "header.payload.signature",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "User"
        ],
        "operationId": "resetPassword",
        "description": "",
        "summary": "Reset password"
      }
    },
    "/health-check": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Status"
        ],
        "operationId": "getHealthCheck",
        "description": "",
        "summary": "Health check"
      }
    }
  },
  "definitions": {
    "Error": {
      "properties": {
        "message": {
          "example": "An error occurred",
          "type": "string"
        },
        "name": {
          "example": "Error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Event": {
      "properties": {
        "_id": {
          "example": "5c14089df7aa5a78833a633d",
          "format": "uuid",
          "type": "string"
        },
        "createdAt": {
          "example": "2018-12-14 19:46:37.733",
          "format": "date-time",
          "type": "string"
        },
        "date": {
          "example": "2018-12-25 00:00:00.000",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "example": "Christmas 2018",
          "type": "string"
        },
        "slug": {
          "example": "christmas-2018",
          "type": "string"
        },
        "updatedAt": {
          "example": "2018-12-14 19:46:37.733",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "_id": {
          "example": "5c14089df7aa5a78833a633d",
          "format": "uuid",
          "type": "string"
        },
        "createdAt": {
          "example": "2018-12-14 19:46:37.733",
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "example": "frank@ratpack.org",
          "format": "email",
          "type": "string"
        },
        "firstName": {
          "example": "Frank",
          "type": "string"
        },
        "lastName": {
          "example": "Sinatra",
          "type": "string"
        },
        "updatedAt": {
          "example": "2018-12-14 19:46:37.733",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "description": "",
      "name": "User"
    },
    {
      "description": "",
      "name": "Me"
    },
    {
      "description": "",
      "name": "Documentation"
    },
    {
      "description": "",
      "name": "Auth"
    },
    {
      "description": "",
      "name": "Status"
    }
  ],
  "x-components": {
    "parameters": {},
    "responses": {},
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "requestBodies": {}
  }
}
