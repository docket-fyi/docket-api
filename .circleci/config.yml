version: 2.1
orbs:
  # See https://circleci.com/orbs/registry/orb/circleci/aws-cli
  # aws-cli: circleci/aws-cli@0.1.19
  # See https://circleci.com/orbs/registry/orb/circleci/aws-ecr
  aws-ecr: circleci/aws-ecr@6.7.0
  # See https://circleci.com/orbs/registry/orb/circleci/aws-ecs
  # aws-ecs: circleci/aws-ecs@1.0.4
jobs:
  lint:
    working_directory: ~/docket/docket-api
    docker:
      - image: circleci/node:12.10.0
    steps:
      - checkout
      - run:
          name: Update NPM
          command: sudo npm i -g npm@latest
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install NPM packages
          command: npm ci
      - save_cache:
          paths:
            - ./node_modules
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Lint
          command: npm run lint
  test:
    working_directory: ~/docket/docket-api
    docker:
      - image: circleci/node:12.10.0
    steps:
      - checkout
      - run:
          name: Update NPM
          command: sudo npm i -g npm@latest
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install NPM packages
          command: npm ci
      - save_cache:
          paths:
            - ./node_modules
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Run unit tests
          command: npm run test:unit
      - run:
          name: Upload test results to Coveralls
          command: cat ./coverage/lcov.info | $(npm bin)/coveralls # Configured using environment variables in CircleCI
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: coverage
      - store_test_results:
          path: test-results
  # build_and_push_docker_image:
  #   working_directory: ~/docket/docket-api
  #   docker:
  #     - image: docker:stable-git
  #   steps:
  #     - checkout
  #     - run:
  #         name: Update NPM
  #         command: sudo npm i -g npm@latest
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Install NPM packages
  #         command: npm ci
  #     - save_cache:
  #         paths:
  #           - ./node_modules
  #         key: dependency-cache-{{ checksum "package-lock.json" }}
  #     - run:
  #         name: Export AWS ECR URI environment variable
  #         command: export AWS_ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPOSITORY_NAME
  #     - run:
  #         name: Export Docker tag environment variable
  #         command: export DOCKER_TAG=$AWS_ECR_URI:$CIRCLE_SHA1
  #     - run:
  #         name: Get AWS ECS login
  #         command: eval $(aws ecr get-login --no-include-email)
  #     - run:
  #         name: Build Docker image
  #         command: docker build -f ./Dockerfile -t $DOCKER_TAG .
  #     - run:
  #         name: Push Docker image
  #         command: docker push $DOCKER_URI
  # update_cloudformation:
  #   working_directory: ~/docket/docket-api
  #   docker:
  #     - image: circleci/node:12.10.0
  #   steps:
  #     - run:
  #         name: Update AWS CloudFormation stack
  #         command: aws ecs update-stack $CFN_SERVICE_STACK_NAME aws/cloudformation/stack.yml --docker_image_url $DOCKER_IMAGE_URL:build-$BITBUCKET_BUILD_NUMBER
workflows:
  version: 2
  lint_and_test:
    jobs:
      - lint
      - test
  build_and_push_image:
    jobs:
      - aws-ecr/build-and-push_image:
          # account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${AWS_SECRET_ACCESS_KEY}"
          # context: myContext
          # create-repo: true
          # dockerfile: "Dockerfile"
          # path: pathToMyDockerfile
          # profile-name: myProfileName
          # region: "${AWS_REGION}"
          repo: "${AWS_ECR_REPOSITORY_NAME}"
          tag: "${CIRCLE_SHA1}"
  # update_cloudformation:
  #   jobs:
  #     - update_cloudformation
