# This template is intended to...
#
# Setup stack (setup.yml)
#  |
#  | import
#  +--------> Root stack (root.yml)
#              |
#              | parameters
#              +------------> Config stack (config.yml)
#              | parameters
#              +------------> Network stack (network.yml; outputs VPC & subnets)
#              | parameters
#              +------------> Vault stack (vault.yml) <â”€ You are here
#              | parameters
#              +------------> App stack (app.yml; outputs container security group ID)
#              | parameters
#              +------------> Data stack (data.yml)
#
# Run the following command to create/update this stack:
#
# aws cloudformation deploy \
#   --template-file ./aws/cloudformation/vault.yml \
#   --stack-name DocketEnvApiVaultStack \
#   --profile docket \
#   --parameter-overrides \
#     ApplicationNameParameter=value \
#     EnvironmentNameParameter=ENV \
#     ComponentNameParameter=value
#
########################################################################

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: "2010-09-09"

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-description-structure.html
Description: "Docket API Vault infrastructure"

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# Metadata:

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
# Conditions:

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
# Transform:

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# Mappings:

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  ApplicationNameParameter:
    AllowedPattern: "^[a-z]+$"
    Description: "The name of the application"
    Type: "String"
    Default: "docket"
  EnvironmentNameParameter: # This will come from the parent stack
    AllowedPattern: "^[a-z]+$"
    AllowedValues:
      - "staging"
      - "production"
    Default: "staging"
    ConstraintDescription: "Must match pattern ^[a-z]+$"
    Description: "The environment in which the application will run."
    Type: "String"
  ComponentNameParameter:
    ConstraintDescription: "Must match pattern ^[a-z]+$"
    Description: "The application component name"
    AllowedPattern: "^[a-z]+$"
    Default: "vault"
    Type: "String"
  VpcIdParameter:
    Description: "VPC ID"
    Type: "String"
  SubnetOneIdParameter:
    Description: "Subnet #1 ID"
    Type: "String"
  SubnetTwoIdParameter:
    Description: "Subnet #2 ID"
    Type: "String"
  SubnetThreeIdParameter:
    Description: "Subnet #3 ID"
    Type: "String"
  SubnetFourIdParameter:
    Description: "Subnet #4 ID"
    Type: "String"

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  VaultCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName:
        Fn::Join:
          - "-"
          - - !Ref "ApplicationNameParameter"
            - !Ref "EnvironmentNameParameter"
            - "vault"
      # ClusterSettings:
      #   - Name: "containerInsights"
      #     Value: "enabled" | "disabled"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
  VaultExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: "Docket Vault execution role"
      # ManagedPolicyArns:
      #   - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      #   - "arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess"
      #   - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
      # MaxSessionDuration: Integer
      # Path: String
      # PermissionsBoundary: String
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
          PolicyName: "docket-vault-role-ecs"
      # RoleName: "docket-vault-execution-role"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
  VaultTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: "Docket Vault task role"
      # ManagedPolicyArns:
      #   - String
      # MaxSessionDuration: Integer
      # Path: String
      # PermissionsBoundary: String
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
          PolicyName: "docket-vault-role-ecs"
      RoleName: "docket-vault-task-role"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
  VaultLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Vault load balancer description"
      # GroupName: "load-balancer-security-group"
      # SecurityGroupEgress:
      #   - CidrIp: String
      #     CidrIpv6: String
      #     Description: String
      #     DestinationPrefixListId: String
      #     DestinationSecurityGroupId: String
      #     FromPort: Integer
      #     IpProtocol: String
      #     ToPort: Integer
      SecurityGroupIngress:
        # - CidrIp: "0.0.0.0/0"
        #   # CidrIpv6: String
        #   Description: "Load balancer security group ingress TCP 80"
        #   FromPort: 80
        #   IpProtocol: "tcp"
        #   # SourcePrefixListId: String
        #   # SourceSecurityGroupId: String
        #   # SourceSecurityGroupName: String
        #   # SourceSecurityGroupOwnerId: String
        #   ToPort: 80
        - CidrIp: "0.0.0.0/0"
          # CidrIpv6: String
          Description: "Vault load balancer security group ingress TCP 443"
          FromPort: 443
          IpProtocol: "tcp"
          # SourcePrefixListId: String
          # SourceSecurityGroupId: String
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: 443
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      VpcId: !Ref "VpcIdParameter"
  VaultLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !Ref "VaultCertificate"
      DefaultActions:
        - # AuthenticateCognitoConfig:
          #   AuthenticationRequestExtraParams:
          #     Key : Value
          #   OnUnauthenticatedRequest: String
          #   Scope: String
          #   SessionCookieName: String
          #   SessionTimeout: Long
          #   UserPoolArn: String
          #   UserPoolClientId: String
          #   UserPoolDomain: String
          # AuthenticateOidcConfig:
          #   AuthenticationRequestExtraParams:
          #     Key : Value
          #   AuthorizationEndpoint: String
          #   ClientId: String
          #   ClientSecret: String
          #   Issuer: String
          #   OnUnauthenticatedRequest: String
          #   Scope: String
          #   SessionCookieName: String
          #   SessionTimeout: Long
          #   TokenEndpoint: String
          #   UserInfoEndpoint: String
          # FixedResponseConfig:
          #   ContentType: String
          #   MessageBody: String
          #   StatusCode: String
          # Order: Integer
          # RedirectConfig:
          #   Host: String
          #   Path: String
          #   Port: String
          #   Protocol: String
          #   Query: String
          #   StatusCode: String
          TargetGroupArn: !Ref "VaultTargetGroup"
          Type: "forward"
      LoadBalancerArn: !Ref "VaultLoadBalancer"
      Port: 443
      Protocol: "HTTPS"
      # SslPolicy: String
  VaultLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      # IpAddressType: "dualstack" | "ipv4"
      # LoadBalancerAttributes:
      #   - Key: "access_logs.s3.enabled"
      #     Value: ""
      #   - Key: "access_logs.s3.bucket"
      #     Value: ""
      #   - Key: "access_logs.s3.prefix"
      #     Value: ""
      #   - Key: "deletion_protection.enabled"
      #     Value: ""
      #   - Key: "idle_timeout.timeout_seconds"
      #     Value: ""
      #   - Key: "routing.http.drop_invalid_header_fields.enabled"
      #     Value: ""
      #   - Key: "routing.http2.enabled"
      #     Value: ""
      #   - Key: "load_balancing.cross_zone.enabled"
      #     Value: ""
      Name: "docket-vault-load-balancer"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref "VaultLoadBalancerSecurityGroup"
      # SubnetMappings:
      #   - AllocationId: String
      #     SubnetId: String
      Subnets:
        - !Ref "SubnetOneIdParameter"
        - !Ref "SubnetTwoIdParameter"
        - !Ref "SubnetThreeIdParameter"
        - !Ref "SubnetFourIdParameter"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      Type: "application"
  VaultTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/v1/sys/health"
      HealthCheckPort: "8200"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      # Name: "vault-docket-target-group"
      Port: 8200
      Protocol: "HTTP"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      # TargetGroupAttributes:
      #   - Key: "load_balancing.algorithm.type"
      #     Value: ""
      #   - Key: "load_balancing.algorithm.type"
      #     Value: ""
      #   - Key: "slow_start.duration_seconds"
      #     Value: ""
      #   - Key: "stickiness.enabled"
      #     Value: ""
      #   - Key: "stickiness.type"
      #     Value: ""
      #   - Key: "stickiness.lb_cookie.duration_seconds"
      #     Value: ""
      #   - Key: "lambda.multi_value_headers.enabled"
      #     Value: ""
      #   - Key: "proxy_protocol_v2.enabled"
      #     Value: ""
      # Targets:
      #   - AvailabilityZone: String
      #     Id: String
      #     Port: Integer
      TargetType: "ip"
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VpcIdParameter"
  VaultCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: "vault.staging.docket.fyi"
      # DomainValidationOptions:
      #   - DomainName: String
      #     ValidationDomain: String
      # SubjectAlternativeNames:
      #   - String
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      ValidationMethod: "DNS"
  VaultLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName:
        Fn::Join:
          - "-"
          - - !Ref "ApplicationNameParameter"
            - !Ref "EnvironmentNameParameter"
            - "vault"
      RetentionInDays: 7
  VaultTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Command:
            - "vault"
            - "server"
            - "-config=/vault/config/local.json"
          # Cpu: Integer
          # DependsOn:
          #   - Condition: String
          #     ContainerName: String
          # DisableNetworking: Boolean
          # DnsSearchDomains:
          #   - String
          # DnsServers:
          #   - String
          # DockerLabels:
          #   Key: Value
          # DockerSecurityOptions:
          #   - String
          # EntryPoint:
          #   - "./docker-entrypoint.sh"
          Environment:
            - Name: "VAULT_LOCAL_CONFIG"
              Value: |
                {
                  "backend": {
                    "file": {
                      "path": "/vault/file"
                    }
                  },
                  "listener": {
                    "tcp": {
                      "address": "0.0.0.0:8200",
                      "tls_disable": 1
                    }
                  },
                  "default_lease_ttl": "168h",
                  "max_lease_ttl": "720h",
                  "ui": true
                }
            - Name: "VAULT_API_ADDR"
              Value: "http://0.0.0.0:8200"
          Essential: true
          # ExtraHosts:
          #   - Hostname: String
          #     IpAddress: String
          # FirelensConfiguration:
          #   Options:
          #     Key: Value
          #   Type: String
          # HealthCheck:
          #   Command:
          #     - String
          #   Interval: Integer
          #   Retries: Integer
          #   StartPeriod: Integer
          #   Timeout: Integer
          # Hostname: String
          Image: "vault:1.3.2"
          Interactive: true
          # Links:
          #   - String
          LinuxParameters:
            Capabilities:
              Add:
                - "IPC_LOCK"
          #     Drop:
          #       - String
          #   Devices:
          #     - ContainerPath: String
          #       HostPath: String
          #       Permissions:
          #         - String
          #   InitProcessEnabled: Boolean
          #   MaxSwap: Integer
          #   SharedMemorySize: Integer
          #   Swappiness: Integer
          #   Tmpfs:
          #     - ContainerPath: String
          #       MountOptions:
          #         - String
          #       Size: Integer
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group:
                Fn::Join:
                  - "-"
                  - - !Ref "ApplicationNameParameter"
                    - !Ref "EnvironmentNameParameter"
                    - "vault"
              awslogs-stream-prefix:
                Fn::Join:
                  - "-"
                  - - !Ref "ApplicationNameParameter"
                    - !Ref "EnvironmentNameParameter"
                    - "vault"
            # SecretOptions:
            #   - Name: String
            #     ValueFrom: String
          # Memory: Integer
          # MemoryReservation: Integer
          # MountPoints:
          #   - ContainerPath: String
          #     ReadOnly: Boolean
          #     SourceVolume: String
          Name:
            Fn::Join:
              - "-"
              - - !Ref "ApplicationNameParameter"
                - !Ref "EnvironmentNameParameter"
                - "vault"
          PortMappings:
            - ContainerPort: 8200
              # HostPort: 3000
              Protocol: "tcp"
          # Privileged: Boolean
          PseudoTerminal: true
          # ReadonlyRootFilesystem: Boolean
          # RepositoryCredentials:
          #   CredentialsParameter: String
          # ResourceRequirements:
          #   - Type: String
          #     Value: String
          # Secrets:
          #   - Name: String
          #     ValueFrom: String
          # StartTimeout: Integer
          # StopTimeout: Integer
          # SystemControls:
          #   - Namespace: String
          #     Value: String
          # Ulimits:
          #   - HardLimit: Integer
          #     Name: String
          #     SoftLimit: Integer
          # User: String
          # VolumesFrom:
          #   - ReadOnly: Boolean
          #     SourceContainer: String
          # WorkingDirectory: String
      Cpu: 512
      ExecutionRoleArn: !Ref "VaultExecutionRole"
      Family:
        Fn::Join:
          - "-"
          - - !Ref "ApplicationNameParameter"
            - !Ref "EnvironmentNameParameter"
            - "vault"
      # InferenceAccelerators:
      #   - DeviceName: String
      #     DeviceType: String
      IpcMode: "none"
      Memory: 1024
      NetworkMode: "awsvpc"
      # PidMode: "host" | "task"
      # PlacementConstraints:
      #   - Expression: String
      #     Type: "memberOf"
      # ProxyConfiguration:
      #   ContainerName: String
      #   ProxyConfigurationProperties:
      #     - Name: String
      #     - Value: String
      #   Type: String
      RequiresCompatibilities:
        - "EC2"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      TaskRoleArn: !Ref "VaultTaskRole"
      # Volumes:
      #   - DockerVolumeConfiguration:
      #       Autoprovision: Boolean
      #       Driver: String
      #       DriverOpts:
      #         Key: Value
      #       Labels:
      #         Key: Value
      #       Scope: String
      #     Host:
      #       SourcePath: String
      #     Name: String
  VaultService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - "VaultLoadBalancerListener"
    Properties:
      Cluster: !Ref "VaultCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: "ECS"
      DesiredCount: 0
      EnableECSManagedTags: true
      HealthCheckGracePeriodSeconds: 120
      LaunchType: "EC2"
      LoadBalancers:
        - ContainerName:
            Fn::Join:
              - "-"
              - - !Ref "ApplicationNameParameter"
                - !Ref "EnvironmentNameParameter"
                - "vault"
          ContainerPort: 8200
          # LoadBalancerName: String
          TargetGroupArn: !Ref "VaultTargetGroup"
      NetworkConfiguration:
        AwsvpcConfiguration:
          # AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref "VaultContainerSecurityGroup"
          Subnets:
            - !Ref "SubnetOneIdParameter"
            - !Ref "SubnetTwoIdParameter"
            - !Ref "SubnetThreeIdParameter"
            - !Ref "SubnetFourIdParameter"
      # PlacementConstraints:
      #   - Expression: String
      #     Type: "distinctInstance" | "memberOf"
      # PlacementStrategies:
      #   - Field: String
      #     Type: "binpack" | "random" | "spread"
      # PlatformVersion: "LATEST"
      # PropagateTags: "SERVICE" | "TASK_DEFINITION"
      # Role: String
      # SchedulingStrategy: "DAEMON" | "REPLICA"
      # ServiceName: "docket-vault"
      # ServiceRegistries:
      #   - ContainerName: String
      #     ContainerPort: Integer
      #     Port: Integer
      #     RegistryArn: String
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      TaskDefinition: !Ref "VaultTaskDefinition"
  VaultContainerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Vault container security group description"
      # GroupName: "vault-container-security-group"
      # SecurityGroupEgress:
      #   - CidrIp: String
      #     CidrIpv6: String
      #     Description: String
      #     DestinationPrefixListId: String
      #     DestinationSecurityGroupId: String
      #     FromPort: Integer
      #     IpProtocol: String
      #     ToPort: Integer
      SecurityGroupIngress:
        - # CidrIp: "0.0.0.0/0"
          # CidrIpv6: String
          Description: "Vault container security group ingress TCP 8200"
          FromPort: 8200
          IpProtocol: "tcp"
          # SourcePrefixListId: String
          SourceSecurityGroupId: !Ref "VaultLoadBalancerSecurityGroup"
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: 8200
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      VpcId: !Ref "VpcIdParameter"
  VaultEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      # AdditionalInfo: String
      # Affinity: String
      # AvailabilityZone: String
      # BlockDeviceMappings:
      #   - DeviceName: "/dev/xvda"
      #     Ebs:
      #       # DeleteOnTermination: Boolean
      #       # Encrypted: Boolean
      #       # Iops: 100
      #       # KmsKeyId: String
      #       # SnapshotId: String
      #       VolumeSize: 30
      #       VolumeType: "gp2"
      #     # NoDevice: {}
      #     # VirtualName: String
      # CpuOptions:
      #   CoreCount: Integer
      #   ThreadsPerCore: Integer
      # CreditSpecification:
      #   CPUCredits: String
      # DisableApiTermination: Boolean
      # EbsOptimized: Boolean
      # ElasticGpuSpecifications:
      #   - Type: String
      # ElasticInferenceAccelerators:
      #   - Count: Integer
      #     Type: String
      # HibernationOptions:
      #   Configured: Boolean
      # HostId: String
      # HostResourceGroupArn: String
      IamInstanceProfile: !Ref "VaultIamInstanceProfile"
      ImageId: "ami-0adaad2a73dfb6a9a" # Amazon Linux AMI 2.0.20200205 x86_64 ECS HVM GP2
      # InstanceInitiatedShutdownBehavior: "stop" | "terminate"
      InstanceType: "t2.small"
      # Ipv6AddressCount: Integer
      # Ipv6Addresses:
      #   - Ipv6Address: String
      # KernelId: String
      KeyName:
        Fn::Join:
          - "-"
          - - "aws"
            - !Ref "ApplicationNameParameter"
            - !Ref "EnvironmentNameParameter"
            - "vault"
      # LaunchTemplate:
      #   LaunchTemplateId: String
      #   LaunchTemplateName: String
      #   Version: String
      # LicenseSpecifications:
      #   - LicenseConfigurationArn: String
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          # DeleteOnTermination: Boolean
          # Description: String
          DeviceIndex: "0"
          GroupSet:
            - !Ref "VaultSecurityGroup"
          # Ipv6AddressCount: Integer
          # Ipv6Addresses:
          #   - Ipv6Address: String
          # NetworkInterfaceId: String
          # PrivateIpAddress: String
          # PrivateIpAddresses:
          #   - Primary: Boolean
          #     PrivateIpAddress: String
          # SecondaryPrivateIpAddressCount: Integer
          SubnetId: !Ref "SubnetOneIdParameter"
      # PlacementGroupName: String
      # PrivateIpAddress: String
      # RamdiskId: String
      # SecurityGroupIds:
      #   - !Ref "VaultSecurityGroup"
      # SecurityGroups:
      #   - !Ref "VaultSecurityGroup"
      # SourceDestCheck: Boolean
      # SsmAssociations:
      #   - AssociationParameters:
      #       - Key: String
      #         Value:
      #           - String
      #     DocumentName: String
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      # Tenancy: "dedicated" | "default" | "host"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${VaultCluster} >> /etc/ecs/ecs.config
      # Volumes:
      #   - Device: "/dev/xvda"
      #     VolumeId: !Ref "VaultVolume"
  VaultIamInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      # InstanceProfileName: String
      # Path: String
      Roles:
        - !Ref "VaultRole"
  VaultRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      # Description: "Docket role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      # MaxSessionDuration: Integer
      # Path: String
      # PermissionsBoundary: String
      # Policies:
      #   - PolicyDocument:
      #       Statement:
      #         - Effect: "Allow"
      #           Action:
      #             - "ecr:GetAuthorizationToken"
      #           Resource: "*"
      #     PolicyName: "docket-role-ecs"
      # RoleName: "docket-execution-role"
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
  # VaultVolumeAttachment:
  #   Type: "AWS::EC2::VolumeAttachment"
  #   Properties:
  #     Device: "/dev/xvda"
  #     InstanceId: !Ref "VaultEC2Instance"
  #     VolumeId: !Ref "VaultVolume"
  # VaultVolume:
  #   Type: "AWS::EC2::Volume"
  #   Properties:
  #     # AutoEnableIO: Boolean
  #     AvailabilityZone: !GetAtt "VaultEC2Instance.AvailabilityZone"
  #     # Encrypted: Boolean
  #     Iops: 100
  #     # KmsKeyId: String
  #     Size: 30
  #     # SnapshotId: String
  #     # Tags:
  #     #   - Key: String
  #     #     Value: String
  #     VolumeType: "gp2"
  VaultSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Vault security group description"
      # GroupName: "container-security-group"
      # SecurityGroupEgress:
      #   - CidrIp: String
      #     CidrIpv6: String
      #     Description: String
      #     DestinationPrefixListId: String
      #     DestinationSecurityGroupId: String
      #     FromPort: Integer
      #     IpProtocol: String
      #     ToPort: Integer
      SecurityGroupIngress:
        - # CidrIp: "0.0.0.0/0"
          # CidrIpv6: String
          Description: "Container security group ingress TCP 8200"
          FromPort: 8200
          IpProtocol: "tcp"
          # SourcePrefixListId: String
          SourceSecurityGroupId: !Ref "VaultLoadBalancerSecurityGroup"
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: 8200
        - CidrIp: "0.0.0.0/0"
          # CidrIpv6: String
          Description: "Container security group ingress SSH 22"
          FromPort: 22
          IpProtocol: "tcp"
          # SourcePrefixListId: String
          # SourceSecurityGroupId: !Ref "VaultLoadBalancerSecurityGroup"
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: 22
      Tags:
        - Key: "Application"
          Value: !Ref "ApplicationNameParameter"
        - Key: "Component"
          Value: !Ref "ComponentNameParameter"
        - Key: "StackName"
          Value: !Ref "AWS::StackName"
        - Key: "Environment"
          Value: !Ref "EnvironmentNameParameter"
      VpcId: !Ref "VpcIdParameter"
  VaultLoadBalancerToSubdomainARecord:
    Type: "AWS::Route53::RecordSet"
    DependsOn:
      - "VaultLoadBalancer"
    Properties:
      AliasTarget:
        DNSName: !GetAtt "VaultLoadBalancer.DNSName"
        # EvaluateTargetHealth: Boolean
        HostedZoneId: !GetAtt "VaultLoadBalancer.CanonicalHostedZoneID"
      # Comment: String
      # Failover: String
      # GeoLocation:
      #   ContinentCode: String
      #   CountryCode: String
      #   SubdivisionCode: String
      # HealthCheckId: String
      # HostedZoneId: String
      HostedZoneName: "docket.fyi."
      # MultiValueAnswer: Boolean
      Name: "vault.staging.docket.fyi."
      # Region: String
      # ResourceRecords:
      #   - String
      # SetIdentifier: String
      # TTL: String
      Type: "A"
      # Weight: Integer

# See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# Outputs:
